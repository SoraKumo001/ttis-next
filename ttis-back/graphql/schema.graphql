# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Contents {
  id: ID!
  priority: Float!
  visible: Boolean
  page: Boolean!
  title_type: Int!
  title: String!
  value_type: String!
  value: String!
  parentId: String
  children: [Contents!]
  parent: Contents!
  createAt: DateTime!
  updateAt: DateTime!
}

enum ContentsVector {
  CHILD_FIRST
  CHILD_LAST
  BEFORE
  NEXT
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Login {
  token: String!
  user: User!
}

type Mutation {
  createContents(value: String, value_type: String, title: String, title_type: Int, visible: Boolean, page: Boolean, vector: ContentsVector, parent: ID): Contents
  updateContents(value: String, value_type: String, parent: ID, title: String, title_type: Int, visible: Boolean, page: Boolean, id: ID!): Contents
  deleteContents(id: ID!): [ID!]!
  createUser(info: String, password: String!, name: String!): User
  updateUser(info: String, password: String, name: String, id: Int!): User
  deleteUser(id: Int!): Boolean!
  deleteUsers(ids: [Int!]!): Boolean!
  login(password: String!, name: String!): Login
}

type PageContents {
  id: ID!
  contents: [Contents!]!
}

type Query {
  contentsTree(level: Int, visible: Boolean, id: ID): Contents!
  contentsPage(visible: Boolean, id: ID): PageContents
  contentsList(level: Int, visible: Boolean, id: ID): [Contents!]!
  contents(id: ID): Contents
  users: [User!]
  currentUser: Login
}

type User {
  id: Int!
  enable: Boolean!
  name: String!
  info: String!
}
